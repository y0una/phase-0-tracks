{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red210\green0\blue53;
\red245\green245\blue247;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10900\viewh14520\viewkind0
\deftab720
\pard\tx566\pardeftab720\sl420\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What are the differences between the two different hash syntaxes shown in the 
\f1 \cf4 \cb5 \strokec4 state_data
\f0 \cf2 \cb3 \strokec2  file?\
- In a  Key => Value pair, Key is the label that applied to Value. For example in\
  "Alabama" => \{population_density: 94.65, population: 4822023\},\
Alabama is the label that applies to the population density and population data\
\pard\tx566\pardeftab720\sl420\partightenfactor0
\cf2 \cb1 - Symbols work very well in hashes. In \'93population_density: 94.65\'94 the \'93:\'94 makes it a fixed value and unchangeable.\
\pard\tx566\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \
What does 
\f1 \cf4 \cb5 \strokec4 require_relative
\f0 \cf2 \cb3 \strokec2  do? How is it different from 
\f1 \cf4 \cb5 \strokec4 require
\f0 \cf2 \cb3 \strokec2 ?\cb1 \
\pard\tx566\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 - require_relative complements the builtin method require by allowing you to load a file that is relative to the file containing the require_relative statement.\
\
For example, if you have unit test classes in the "test" directory, and data for them under the test "test/data" directory, then you might use a line like this in a test case: require_relative "data/customer_data_1"\
\
Since neither "test" nor "test/data" are likely to be in Ruby\'92s library path (and for good reason), a normal require won\'92t find them. require_relative is a good solution for this particular problem.\
\
- require depends on the directory that it\'92s in when file is run. It may not find if it\'92s in a separate folder.\
\
\pard\tx566\pardeftab720\sl420\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What are some ways to iterate through a hash?\cb1 \
\cb3 - hash.each do | key, value |\
   # what you want to do to the hash\
  end\
- .map! will permanently change the item to whatever the last line in block evaluates to\
\
When refactoring 
\f1 \cf4 \cb5 \strokec4 virus_effects
\f0 \cf2 \cb3 \strokec2 , what stood out to you about the variables, if anything?\cb1 \
\cb3 - We didn\'92t need to take in the @population_density, @population, @state parameters because we aren\'92t specifying arguments in the virus_effects method\
\
What concept did you most solidify in this challenge?\cb1 \
- Best solidified is the .each and .map! iterating through an array / hash}